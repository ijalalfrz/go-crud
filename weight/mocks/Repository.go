// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ijalalfrz/sirclo-weight-test/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindMany provides a mock function with given fields: ctx, sortBy, sort
func (_m *Repository) FindMany(ctx context.Context, sortBy string, sort int) ([]entity.Weight, error) {
	ret := _m.Called(ctx, sortBy, sort)

	var r0 []entity.Weight
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []entity.Weight); ok {
		r0 = rf(ctx, sortBy, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Weight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, sortBy, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, key
func (_m *Repository) FindOne(ctx context.Context, key int64) (entity.Weight, error) {
	ret := _m.Called(ctx, key)

	var r0 entity.Weight
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Weight); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(entity.Weight)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, _a1
func (_m *Repository) InsertOne(ctx context.Context, _a1 entity.Weight) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Weight) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: ctx, key, _a2
func (_m *Repository) UpdateOne(ctx context.Context, key int64, _a2 entity.Weight) error {
	ret := _m.Called(ctx, key, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.Weight) error); ok {
		r0 = rf(ctx, key, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
